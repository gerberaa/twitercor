#!/usr/bin/env python3
"""
IP Tracker Test - –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –≤—Å—ñ –∑–∞–ø–∏—Ç–∏ —Å–ø—Ä–∞–≤–¥—ñ –π–¥—É—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω—ñ –ø—Ä–æ–∫—Å—ñ

–¶–µ–π —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç—É—î —Ä–µ–∞–ª—å–Ω—ñ IP –∞–¥—Ä–µ—Å–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∞–∫–∞—É–Ω—Ç–∞,
—â–æ–± –ø–µ—Ä–µ–∫–æ–Ω–∞—Ç–∏—Å—è —â–æ –ø—Ä–æ–∫—Å—ñ –ø—Ä–∞—Ü—é—é—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ.
"""

import asyncio
import json
import httpx
from typing import Dict, List, Optional
from twscrape import API
from twitter_actions import TwitterActionsAPI


class IPTracker:
    """–¢—Ä–µ–∫–µ—Ä IP –∞–¥—Ä–µ—Å –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–∫—Å—ñ."""
    
    def __init__(self):
        self.test_url = "https://api.ipify.org?format=json"
        self.results = {}
    
    async def test_account_ip(self, username: str, proxy: str) -> Dict:
        """–¢–µ—Å—Ç—É—î —Ä–µ–∞–ª—å–Ω–∏–π IP –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∞—É–Ω—Ç–∞."""
        result = {
            "username": username,
            "assigned_proxy": proxy,
            "actual_ip": None,
            "proxy_ip": None,
            "working": False,
            "error": None
        }
        
        try:
            # –°–ø–æ—á–∞—Ç–∫—É –æ—Ç—Ä–∏–º—É—î–º–æ IP –ø—Ä–æ–∫—Å—ñ –±–µ–∑ –∑–∞–ø–∏—Ç—É
            if proxy:
                proxy_parts = proxy.replace("http://", "").split("@")
                if len(proxy_parts) == 2:
                    proxy_host = proxy_parts[1].split(":")[0]
                    result["proxy_ip"] = proxy_host
            
            # –¢–µ—Å—Ç—É—î–º–æ —Ä–µ–∞–ª—å–Ω–∏–π –∑–∞–ø–∏—Ç —á–µ—Ä–µ–∑ TwitterActionsAPI
            from twscrape.accounts_pool import AccountsPool
            pool = AccountsPool()
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ API –∑ –ø—Ä–æ–∫—Å—ñ –∞–∫–∞—É–Ω—Ç–∞
            actions_api = TwitterActionsAPI(pool, debug=True, proxy=proxy)
            
            # –†–æ–±–∏–º–æ –ø—Ä—è–º–∏–π HTTP –∑–∞–ø–∏—Ç —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å—ñ
            async with httpx.AsyncClient(proxy=proxy, timeout=15.0) as client:
                response = await client.get(self.test_url)
                
                if response.status_code == 200:
                    data = response.json()
                    result["actual_ip"] = data.get("ip", "Unknown")
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ IP –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –ø—Ä–æ–∫—Å—ñ
                    if result["proxy_ip"] and result["actual_ip"] == result["proxy_ip"]:
                        result["working"] = True
                    elif result["actual_ip"] != result["proxy_ip"]:
                        result["working"] = True  # –ü—Ä–æ–∫—Å—ñ –ø—Ä–∞—Ü—é—î, –∞–ª–µ –º–æ–∂–µ –º–∞—Ç–∏ —ñ–Ω—à–∏–π –≤–∏—Ö—ñ–¥–Ω–∏–π IP
                    else:
                        result["error"] = "IP –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –ø—Ä–æ–∫—Å—ñ"
                else:
                    result["error"] = f"HTTP {response.status_code}"
                    
        except Exception as e:
            result["error"] = str(e)[:100]
            
        return result
    
    async def test_all_accounts(self) -> Dict[str, Dict]:
        """–¢–µ—Å—Ç—É—î IP –¥–ª—è –≤—Å—ñ—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤."""
        print("üîç IP Tracker Test - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ–∫—Å—ñ –∞–∫–∞—É–Ω—Ç—ñ–≤")
        print("=" * 60)
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –ø—Ä–æ–∫—Å—ñ
        proxies = {}
        try:
            with open("proxies.json", 'r', encoding='utf-8') as f:
                proxies = json.load(f)
            print(f"üìÅ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(proxies)} –ø—Ä–∏–∑–Ω–∞—á–µ–Ω—å –ø—Ä–æ–∫—Å—ñ")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ: {e}")
            return {}
        
        print("\nüß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è IP –∞–¥—Ä–µ—Å...")
        print("-" * 60)
        
        # –¢–µ—Å—Ç—É—î–º–æ –∫–æ–∂–µ–Ω –∞–∫–∞—É–Ω—Ç
        tasks = []
        for username, proxy in proxies.items():
            task = self.test_account_ip(username, proxy)
            tasks.append(task)
        
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        account_results = {}
        for i, result in enumerate(results):
            if isinstance(result, Exception):
                username = list(proxies.keys())[i]
                account_results[username] = {
                    "username": username,
                    "error": str(result),
                    "working": False
                }
            else:
                account_results[result["username"]] = result
        
        return account_results
    
    def print_results(self, results: Dict[str, Dict]):
        """–í–∏–≤–æ–¥–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è."""
        working_count = sum(1 for r in results.values() if r.get("working", False))
        total_count = len(results)
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ IP —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:")
        print(f"‚úÖ –ü—Ä–∞—Ü—é—é—Ç—å: {working_count}/{total_count}")
        print(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∏: {total_count - working_count}/{total_count}")
        print("=" * 80)
        
        print(f"{'–ê–∫–∞—É–Ω—Ç':<20} {'–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π IP':<20} {'–†–µ–∞–ª—å–Ω–∏–π IP':<20} {'–°—Ç–∞—Ç—É—Å':<15}")
        print("-" * 80)
        
        for result in results.values():
            username = result.get("username", "Unknown")[:19]
            proxy_ip = result.get("proxy_ip", "N/A")[:19]
            actual_ip = result.get("actual_ip", "N/A")[:19]
            
            if result.get("working", False):
                status = "‚úÖ OK"
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ IPs –∑–±—ñ–≥–∞—é—Ç—å—Å—è
                if proxy_ip != "N/A" and actual_ip != "N/A" and proxy_ip != actual_ip:
                    status = "‚ö†Ô∏è –Ü–Ω—à–∏–π IP"
            else:
                error = result.get("error", "Unknown error")[:15]
                status = f"‚ùå {error}"
            
            print(f"{username:<20} {proxy_ip:<20} {actual_ip:<20} {status:<15}")
    
    def analyze_security(self, results: Dict[str, Dict]):
        """–ê–Ω–∞–ª—ñ–∑—É—î –±–µ–∑–ø–µ–∫—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó."""
        print(f"\nüõ°Ô∏è –ê–Ω–∞–ª—ñ–∑ –±–µ–∑–ø–µ–∫–∏:")
        print("-" * 40)
        
        working_proxies = [r for r in results.values() if r.get("working", False)]
        failed_proxies = [r for r in results.values() if not r.get("working", False)]
        
        print(f"‚úÖ –ë–µ–∑–ø–µ—á–Ω—ñ –∞–∫–∞—É–Ω—Ç–∏ (–ø—Ä–æ–∫—Å—ñ –ø—Ä–∞—Ü—é—é—Ç—å): {len(working_proxies)}")
        print(f"üö® –ù–ï–ë–ï–ó–ü–ï–ß–ù–Ü –∞–∫–∞—É–Ω—Ç–∏ (–ø—Ä–æ–∫—Å—ñ –ù–ï –ø—Ä–∞—Ü—é—é—Ç—å): {len(failed_proxies)}")
        
        if failed_proxies:
            print(f"\n‚ö†Ô∏è –£–í–ê–ì–ê! –¶—ñ –∞–∫–∞—É–Ω—Ç–∏ –ø—Ä–∞—Ü—é—é—Ç—å –ë–ï–ó –ø—Ä–æ–∫—Å—ñ:")
            for r in failed_proxies:
                username = r.get("username", "Unknown")
                error = r.get("error", "Unknown")
                print(f"  üö® @{username}: {error}")
            print(f"\nüí• –ö–†–ò–¢–ò–ß–ù–û: {len(failed_proxies)} –∞–∫–∞—É–Ω—Ç—ñ–≤ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –∑–∞–±–∞–Ω–µ–Ω—ñ!")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å IP
        unique_ips = set()
        for r in working_proxies:
            if r.get("actual_ip"):
                unique_ips.add(r.get("actual_ip"))
        
        print(f"\nüåê –£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö IP –∞–¥—Ä–µ—Å: {len(unique_ips)}")
        if len(unique_ips) < len(working_proxies):
            print(f"‚ö†Ô∏è –î–µ—è–∫—ñ –∞–∫–∞—É–Ω—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å –æ–¥–Ω–∞–∫–æ–≤—ñ IP!")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
        security_score = (len(working_proxies) / len(results)) * 100 if results else 0
        print(f"\nüìà –û—Ü—ñ–Ω–∫–∞ –±–µ–∑–ø–µ–∫–∏: {security_score:.1f}%")
        
        if security_score >= 90:
            print("üéâ –í–Ü–î–ú–Ü–ù–ù–û: –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è!")
        elif security_score >= 70:
            print("‚ö†Ô∏è –î–û–ë–†–ï: –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–ø–µ—á–Ω–∞, –∞–ª–µ —î –ø—Ä–æ–±–ª–µ–º–Ω—ñ –∞–∫–∞—É–Ω—Ç–∏")
        elif security_score >= 50:
            print("üö® –£–í–ê–ì–ê: –ë–∞–≥–∞—Ç–æ –ø—Ä–æ–±–ª–µ–º, –ø–æ—Ç—Ä—ñ–±–Ω—ñ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è")
        else:
            print("üí• –ö–†–ò–¢–ò–ß–ù–û: –°–∏—Å—Ç–µ–º–∞ –ù–ï –±–µ–∑–ø–µ—á–Ω–∞! –ù–ï –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ!")


async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è."""
    tracker = IPTracker()
    
    try:
        results = await tracker.test_all_accounts()
        
        if results:
            tracker.print_results(results)
            tracker.analyze_security(results)
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
            with open("ip_tracker_results.json", 'w', encoding='utf-8') as f:
                json.dump(results, f, indent=2, ensure_ascii=False)
            print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –≤ ip_tracker_results.json")
            
        else:
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—Ç–µ—Å—Ç—É–≤–∞—Ç–∏ –∂–æ–¥–Ω–æ–≥–æ –∞–∫–∞—É–Ω—Ç–∞")
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    print("üéØ Starting IP Tracker Test...")
    asyncio.run(main())