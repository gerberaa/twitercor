#!/usr/bin/env python3
"""
Main launcher script for Twitter/X Automation System

This script provides a unified interface to manage accounts and run the automation.
"""

import asyncio
import os
import sys
from typing import Optional

# Add current directory to path so we can import our modules
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from twscrape import API
from twitter_automation import TwitterAutomation
from telegram_bot import TwitterTelegramBot, TwitterBotConfig


def load_env_file(file_path: str = "config.env"):
    """Load environment variables from .env and/or config.env if present.

    Precedence: .env (if exists) is loaded first, then config.env (if exists) fills any missing keys.
    """
    loaded_any = False

    def _load(path: str):
        nonlocal loaded_any
        try:
            with open(path, 'r') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#') and '=' in line:
                        key, value = line.split('=', 1)
                        # Do not overwrite keys already set (allows .env to take precedence)
                        os.environ.setdefault(key.strip(), value.strip())
            print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∫–æ–Ω—Ñ—ñ–≥ –∑ {path}")
            loaded_any = True
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ {path}: {e}")

    # Prefer .env if present
    dotenv_path = os.path.join(os.path.dirname(__file__), '.env')
    if os.path.exists(dotenv_path):
        _load(dotenv_path)

    # Backwards-compat: load config.env (relative to CWD or script dir)
    # Try explicit path param first
    if os.path.isabs(file_path) and os.path.exists(file_path):
        _load(file_path)
    else:
        # Try relative to script dir
        config_path = os.path.join(os.path.dirname(__file__), file_path)
        if os.path.exists(config_path):
            _load(config_path)
        else:
            # Finally, try CWD
            if os.path.exists(file_path):
                _load(file_path)

    if not loaded_any:
        print("‚ÑπÔ∏è –§–∞–π–ª –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó .env –∞–±–æ config.env –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º.")


async def setup_accounts():
    """Setup and manage accounts."""
    print("üîß –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç–∞–º–∏")
    print("=" * 50)
    print()
    print("1. –î–æ–¥–∞—Ç–∏ –≤—Å—ñ –∞–∫–∞—É–Ω—Ç–∏ –∑—ñ —Å–∫—Ä–∏–ø—Ç–∞")
    print("2. –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –∞–∫–∞—É–Ω—Ç—ñ–≤")
    print("3. –£–≤—ñ–π—Ç–∏ –≤ —É—Å—ñ –∞–∫–∞—É–Ω—Ç–∏")
    print("4. –°–∫–∏–Ω—É—Ç–∏ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—ñ–≤")
    print("5. –í–∏–¥–∞–ª–∏—Ç–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ –∞–∫–∞—É–Ω—Ç–∏")
    print("6. –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")
    print()
    
    choice = input("–û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç (1-6): ").strip()
    
    if choice == "1":
        # Import and run bulk account setup
        from setup_accounts_bulk import add_all_accounts
        await add_all_accounts()
    
    elif choice == "2":
        from setup_accounts_bulk import show_accounts_status
        await show_accounts_status()
    
    elif choice == "3":
        api = API()
        print("üîÑ –í—Ö—ñ–¥ –≤ —É—Å—ñ –∞–∫–∞—É–Ω—Ç–∏...")
        result = await api.pool.login_all()
        print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ: {result['success']}, ‚ùå –ü–æ–º–∏–ª–∫–∏: {result['failed']}")
    
    elif choice == "4":
        api = API()
        await api.pool.reset_locks()
        print("‚úÖ –í—Å—ñ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—ñ–≤ —Å–∫–∏–Ω—É—Ç–æ.")
    
    elif choice == "5":
        api = API()
        await api.pool.delete_inactive()
        print("‚úÖ –í—Å—ñ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ –∞–∫–∞—É–Ω—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–æ.")
    
    elif choice == "6":
        return
    
    else:
        print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä.")
    
    input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏...")


async def test_automation():
    """Test the automation system."""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó")
    print("=" * 50)
    print()
    
    api = API()
    automation = TwitterAutomation(api)
    
    # Get account status
    active_accounts = await automation.get_active_accounts()
    print(f"üë• –ê–∫—Ç–∏–≤–Ω—ñ –∞–∫–∞—É–Ω—Ç–∏: {len(active_accounts)}")
    
    if not active_accounts:
        print("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤. –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ –∞–∫–∞—É–Ω—Ç–∏.")
        input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏...")
        return
    
    # Get test URL
    test_url = input("üîó –í–≤–µ–¥—ñ—Ç—å URL Twitter/X –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è (–∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –¥–µ–º–æ): ").strip()
    
    if not test_url:
        test_url = "https://x.com/elonmusk/status/1234567890"
        print(f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–µ–º–æ URL: {test_url}")
    
    print(f"\nüéØ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó –∑: {test_url}")
    print("‚è≥ –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω...")
    
    try:
        result = await automation.auto_engage_tweet(test_url)
        
        print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:")
        print(f"ID —Ç–≤—ñ—Ç–∞: {result.get('tweet_id', 'N/A')}")
        
        if "error" in result:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {result['error']}")
        else:
            actions = result.get("actions", {})
            print(f"‚ù§Ô∏è –õ–∞–π–∫–∏: {actions.get('likes', 0)}")
            print(f"üîÑ –†–µ—Ç–≤—ñ—Ç–∏: {actions.get('retweets', 0)}")
            print(f"üëÄ –ü–µ—Ä–µ–≥–ª—è–¥–∏: {actions.get('views', 0)}")
            
            if result.get("errors"):
                print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∏: {len(result['errors'])}")
                
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç –Ω–µ –≤–¥–∞–≤—Å—è: {e}")
    
    input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏...")


def run_telegram_bot():
    """Run the Telegram bot."""
    print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞")
    print("=" * 50)

    # Ensure env vars are loaded
    load_env_file()

    try:
        token = os.getenv("TELEGRAM_BOT_TOKEN", "")
        if not token:
            print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ —É .env –∞–±–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ")
            print("üí° –î–æ–¥–∞–π—Ç–µ TELEGRAM_BOT_TOKEN —É .env —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑")
            input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏...")
            return

        config = TwitterBotConfig()
        bot = TwitterTelegramBot(config)
        bot.run()  # Blocking run (Ctrl+C to stop)
    except ModuleNotFoundError as e:
        print(f"‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å: {e}")
        print("üí° –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å: pip install python-telegram-bot==20.7")
        input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏...")
    except KeyboardInterrupt:
        print("\nüëã –ë–æ—Ç–∞ –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É Telegram –±–æ—Ç–∞: {e}")
        input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏...")


async def manual_process():
    """Manually process a tweet."""
    print("üéØ –†—É—á–Ω–∞ –æ–±—Ä–æ–±–∫–∞ —Ç–≤—ñ—Ç—ñ–≤")
    print("=" * 50)
    print()
    
    api = API()
    automation = TwitterAutomation(api)
    
    # Get account status
    active_accounts = await automation.get_active_accounts()
    print(f"üë• –ê–∫—Ç–∏–≤–Ω—ñ –∞–∫–∞—É–Ω—Ç–∏: {len(active_accounts)}")
    
    if not active_accounts:
        print("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤. –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ –∞–∫–∞—É–Ω—Ç–∏.")
        input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏...")
        return
    
    # Get tweet URL
    tweet_url = input("üîó –í–≤–µ–¥—ñ—Ç—å URL Twitter/X: ").strip()
    if not tweet_url:
        print("‚ùå URL –Ω–µ –Ω–∞–¥–∞–Ω–æ.")
        input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏...")
        return
    
    print()
    print("üìä –í–∞—Ä—ñ–∞–Ω—Ç–∏ –≤–∑–∞—î–º–æ–¥—ñ—ó:")
    print("1. –ê–≤—Ç–æ (—Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω—ñ —á–∏—Å–ª–∞)")
    print("2. –í–ª–∞—Å–Ω—ñ —á–∏—Å–ª–∞")
    print("3. –í–∏—Å–æ–∫–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å")
    print("4. –ù–∏–∑—å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å")
    
    mode = input("\n–û–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º (1-4): ").strip()
    
    try:
        if mode == "1":
            result = await automation.auto_engage_tweet(tweet_url)
        
        elif mode == "2":
            likes = int(input("‚ù§Ô∏è –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ª–∞–π–∫—ñ–≤: ") or "0")
            retweets = 0  # –í–ò–ú–ö–ù–ï–ù–û: —Ä–µ—Ç–≤—ñ—Ç–∏ –ø–æ–≤–Ω—ñ—Å—Ç—é –≤—ñ–¥–∫–ª—é—á–µ–Ω—ñ
            views = int(input("üëÄ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤: ") or "0")
            print("‚ö†Ô∏è –£–í–ê–ì–ê: –†–µ—Ç–≤—ñ—Ç–∏ –≤—ñ–¥–∫–ª—é—á–µ–Ω—ñ –≤ —Å–∏—Å—Ç–µ–º—ñ")
            result = await automation.process_tweet_url(tweet_url, likes, retweets, views)
        
        elif mode == "3":
            # High engagement - use more accounts
            total = len(active_accounts)
            likes = min(total, int(total * 0.6))
            retweets = 0  # –í–ò–ú–ö–ù–ï–ù–û: —Ä–µ—Ç–≤—ñ—Ç–∏ –ø–æ–≤–Ω—ñ—Å—Ç—é –≤—ñ–¥–∫–ª—é—á–µ–Ω—ñ
            views = min(total, int(total * 0.9))
            result = await automation.process_tweet_url(tweet_url, likes, retweets, views)
        
        elif mode == "4":
            # Low engagement
            total = len(active_accounts)
            likes = min(total, max(1, int(total * 0.1)))
            retweets = 0  # –í–ò–ú–ö–ù–ï–ù–û: —Ä–µ—Ç–≤—ñ—Ç–∏ –ø–æ–≤–Ω—ñ—Å—Ç—é –≤—ñ–¥–∫–ª—é—á–µ–Ω—ñ
            views = min(total, max(1, int(total * 0.3)))
            result = await automation.process_tweet_url(tweet_url, likes, retweets, views)
        
        else:
            print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ä–µ–∂–∏–º.")
            input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏...")
            return
        
        print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ–±—Ä–æ–±–∫–∏:")
        if "error" in result:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {result['error']}")
        else:
            actions = result.get("actions", {})
            print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ!")
            print(f"‚ù§Ô∏è –õ–∞–π–∫–∏: {actions.get('likes', 0)}")
            print(f"üîÑ –†–µ—Ç–≤—ñ—Ç–∏: {actions.get('retweets', 0)}")
            print(f"üëÄ –ü–µ—Ä–µ–≥–ª—è–¥–∏: {actions.get('views', 0)}")
            
            if result.get("errors"):
                print(f"‚ö†Ô∏è –î–µ—è–∫—ñ –¥—ñ—ó –Ω–µ –≤–¥–∞–ª–∏—Å—è: {len(result['errors'])} –ø–æ–º–∏–ª–æ–∫")
    
    except Exception as e:
        print(f"‚ùå –û–±—Ä–æ–±–∫–∞ –Ω–µ –≤–¥–∞–ª–∞—Å—è: {e}")
    
    input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏...")


def main_menu():
    """Display main menu and handle user choices."""
    while True:
        os.system('cls' if os.name == 'nt' else 'clear')  # Clear screen
        
        print("üöÄ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó Twitter/X")
        print("=" * 50)
        print()
        print("1. üîß –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç–∞–º–∏")
        print("2. üåê –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ–∫—Å—ñ")
        print("3. ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞")
        print("4. üéØ –†—É—á–Ω–∞ –æ–±—Ä–æ–±–∫–∞ —Ç–≤—ñ—Ç—ñ–≤")
        print("5. üß™ –¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó")
        print("6. üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏")
        print("7. ‚ùå –í–∏—Ö—ñ–¥")
        print()
        
        choice = input("–û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç (1-7): ").strip()
        
        if choice == "1":
            asyncio.run(setup_accounts())
        
        elif choice == "2":
            asyncio.run(validate_proxies())
        
        elif choice == "3":
            run_telegram_bot()
        
        elif choice == "4":
            asyncio.run(manual_process())
        
        elif choice == "5":
            asyncio.run(test_automation())
        
        elif choice == "6":
            asyncio.run(show_system_status())
        
        elif choice == "7":
            print("üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
            break
        
        else:
            print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏...")


async def validate_proxies():
    """Validate all configured proxies."""
    print("üåê –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ–∫—Å—ñ")
    print("=" * 50)
    
    try:
        from proxy_validator import validate_project_proxies
        working_proxies = await validate_project_proxies()
        
        if working_proxies:
            print(f"\n‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! {len(working_proxies)} –ø—Ä–æ–∫—Å—ñ –ø—Ä–∞—Ü—é—é—Ç—å.")
            print("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ –±–µ–∑–ø–µ—á–Ω–æ—ó –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó.")
        else:
            print(f"\nüö® –ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ä–æ–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å—ñ!")
            print("–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó –±–µ–∑ –ø—Ä–æ–∫—Å—ñ –Ω–µ–±–µ–∑–ø–µ—á–Ω–∏–π —ñ –º–æ–∂–µ –ø—Ä–∏–∑–≤–µ—Å—Ç–∏ –¥–æ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—ñ–≤.")
            
    except ImportError:
        print("‚ùå –í–∞–ª—ñ–¥–∞—Ç–æ—Ä –ø—Ä–æ–∫—Å—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–∞–π–ª proxy_validator.py.")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–∫—Å—ñ: {e}")
    
    input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏...")


async def show_system_status():
    """Show system status."""
    print("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏")
    print("=" * 50)
    
    try:
        api = API()
        
        # Account statistics
        stats = await api.pool.stats()
        print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–∞—É–Ω—Ç—ñ–≤:")
        print(f"‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫–∞—É–Ω—Ç—ñ–≤: {stats.get('total', 0)}")
        print(f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ñ –∞–∫–∞—É–Ω—Ç–∏: {stats.get('active', 0)}")
        print(f"‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ñ –∞–∫–∞—É–Ω—Ç–∏: {stats.get('inactive', 0)}")
        
        # Show locked queues
        locked_queues = [k for k in stats.keys() if k.startswith('locked_')]
        if locked_queues:
            print(f"\nüîí –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ —á–µ—Ä–≥–∏:")
            for queue in locked_queues:
                count = stats[queue]
                queue_name = queue.replace('locked_', '')
                print(f"‚Ä¢ {queue_name}: {count} –∞–∫–∞—É–Ω—Ç—ñ–≤ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ")
        
        # Proxy status
        print(f"\nüåê –°—Ç–∞—Ç—É—Å –ø—Ä–æ–∫—Å—ñ:")
        import os
        import json
        
        if os.path.exists("proxies_working.json"):
            try:
                with open("proxies_working.json", 'r') as f:
                    working_proxies = json.load(f)
                print(f"‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω—ñ –ø—Ä–æ–∫—Å—ñ: {len(working_proxies)}")
            except:
                print("‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∏—Ö –ø—Ä–æ–∫—Å—ñ")
        elif os.path.exists("proxies.json"):
            try:
                with open("proxies.json", 'r') as f:
                    proxies = json.load(f)
                print(f"‚ö†Ô∏è –ù–µ–ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω—ñ –ø—Ä–æ–∫—Å—ñ: {len(proxies)}")
                print("üí° –ó–∞–ø—É—Å—Ç—ñ—Ç—å 'python3 proxy_validator.py' –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–∫—Å—ñ")
            except:
                print("‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –ø—Ä–æ–∫—Å—ñ")
        else:
            print("üö® –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ø—Ä–æ–∫—Å—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ - –ù–ï–ë–ï–ó–ü–ï–ß–ù–û!")
        
        # Configuration status
        print(f"\n‚öôÔ∏è –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è:")
        print(f"‚Ä¢ Telegram —Ç–æ–∫–µ–Ω: {'‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ' if os.getenv('TELEGRAM_BOT_TOKEN') else '‚ùå –ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}")
        print(f"‚Ä¢ –ê–≤—Ç–æ —Ä–µ–∂–∏–º: {'‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ' if os.getenv('AUTO_MODE', 'true').lower() == 'true' else '‚ùå –í–∏–º–∫–Ω–µ–Ω–æ'}")
        print(f"‚Ä¢ –†–µ–∂–∏–º –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è: {'‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ' if os.getenv('DEBUG_MODE', 'false').lower() == 'true' else '‚ùå –í–∏–º–∫–Ω–µ–Ω–æ'}")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É: {e}")
    
    input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏...")


def main():
    """Main function."""
    # Load configuration
    load_env_file()
    
    # Show welcome message
    print("üöÄ –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ —Å–∏—Å—Ç–µ–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó Twitter/X!")
    print()
    print("–¶—è —Å–∏—Å—Ç–µ–º–∞ –¥–æ–∑–≤–æ–ª—è—î –≤–∞–º:")
    print("‚Ä¢ –ö–µ—Ä—É–≤–∞—Ç–∏ –∫—ñ–ª—å–∫–æ–º–∞ –∞–∫–∞—É–Ω—Ç–∞–º–∏ Twitter/X")
    print("‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ª–∞–π–∫–∞—Ç–∏, —Ä–µ—Ç–≤—ñ—Ç–∏—Ç–∏ —Ç–∞ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –ø–æ—Å—Ç–∏")
    print("‚Ä¢ –Ü–Ω—Ç–µ–≥—Ä—É–≤–∞—Ç–∏—Å—è –∑ Telegram –¥–ª—è –ª–µ–≥–∫–æ—ó –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó")
    print("‚Ä¢ –û–±—Ä–æ–±–ª—è—Ç–∏ —Ç–≤—ñ—Ç–∏ –∑ —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–∏–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏ –≤–∑–∞—î–º–æ–¥—ñ—ó")
    print()
    
    # Check if we have any accounts
    try:
        api = API()
        accounts_info = asyncio.run(api.pool.accounts_info())
        
        if not accounts_info:
            print("‚ÑπÔ∏è –ê–∫–∞—É–Ω—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –î–∞–≤–∞–π—Ç–µ —Å–ø–æ—á–∞—Ç–∫—É —ó—Ö –Ω–∞–ª–∞—à—Ç—É—î–º–æ!")
            input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter —â–æ–± –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—ñ–≤...")
            asyncio.run(setup_accounts())
        else:
            active_count = sum(1 for acc in accounts_info if acc["active"])
            print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(accounts_info)} –∞–∫–∞—É–Ω—Ç—ñ–≤ ({active_count} –∞–∫—Ç–∏–≤–Ω–∏—Ö)")
    
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç–∏: {e}")
    
    # Start main menu
    main_menu()


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüëã System stopped by user.")
    except Exception as e:
        print(f"\n‚ùå Unexpected error: {e}")
        print("Please check your configuration and try again.")